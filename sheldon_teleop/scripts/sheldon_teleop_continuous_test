#!/usr/bin/env python

import rospy
from geometry_msgs.msg import Twist
import sys, select, termios, tty

import time

msg = """
Enter speed and turn, 0.0 - 1.0
---------------------------
"""
def getKey():
    tty.setraw(sys.stdin.fileno())
    rlist, _, _ = select.select([sys.stdin], [], [], 0.1)
    if rlist:
        key = sys.stdin.read(1)
    else:
        key = ''

    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
    return key


if __name__=="__main__":
  settings = termios.tcgetattr(sys.stdin)
 
  rospy.init_node('sheldon_teleop')
  # pub = rospy.Publisher('cmd_vel_mux/input/teleop', Twist, queue_size=2)
  pub = rospy.Publisher('move_base/priority2', Twist, queue_size=2)

  twist = Twist()
  target_speed = 0.0
  target_turn = 0.0
  print("press x to issue a command, q to quit ")            

  try:

    loopcount = 0
    while(1):
      
      key = getKey()
      if key == 'q' or key == 'Q':   # or (key == '\x03'):
        break
      elif key == 'x':

        var1, var2 = raw_input("Enter speed, turn as two floats here: ").split()
        target_speed, target_turn = [float(var1), float(var2)]
        print("target: speed: {0}, turn: {1}".format(target_speed, target_turn))            

        twist.linear.x = target_speed; twist.linear.y = 0; twist.linear.z = 0
        twist.angular.x = 0; twist.angular.y = 0; twist.angular.z = target_turn

      pub.publish(twist)
      time.sleep(0.020)



  except: 
    print("quitting on exception")

  finally:
    twist.linear.x = 0; twist.linear.y = 0; twist.linear.z = 0
    twist.angular.x = 0; twist.angular.y = 0; twist.angular.z = 0
    pub.publish(twist)

  termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)



